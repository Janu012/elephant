# -*- coding: utf-8 -*-
"""steramlitimageprossing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BmaD8zat0XA81aOgAS4GCV9vkN6ZCrDl
"""

#Import necessary libraries
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt

!pip install -q kaggle
from  google.colab import files
files.upload()

from google.colab import userdata
import os

os.environ["KAGGLE_KEY"] = userdata.get('KAGGLE_KEY')
os.environ["KAGGLE_USERNAME"] = userdata.get('KAGGLE_USERNAME')

!kaggle datasets download -d gunarakulangr/sri-lankan-wild-elephant-dataset

!unzip "/content/sri-lankan-wild-elephant-dataset.zip"

import tensorflow as tf  # Import TensorFlow

# Check if GPU is available
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
    raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

import os

DIR = '/content/sri-lankan-wild-elephant-dataset'  # Updated path

# Print the current working directory
print("Current working directory:", os.getcwd())

# List the contents of the '/content/' directory to check if the path exists
print("Contents of '/content/':", os.listdir('/content/'))

# Check if the updated path exists
if os.path.exists(DIR):
    # List and print all contents inside the dataset directory
    dir_contents = os.listdir(DIR)
    print(f"Contents of '{DIR}':", dir_contents)

    # Filter only directories to create classes
    classes = [item for item in dir_contents if os.path.isdir(os.path.join(DIR, item))]
    print("Classes:", classes)
else:
    print(f"The directory {DIR} does not exist.")

import pandas as pd

label = []
path = []

for dirname, _,filenames in os.walk(DIR):
    for filename in filenames:
        if os.path.splitext(filename)[-1]=='.jpg':               # If filename contains .png
            if dirname.split()[-1]!='GT':
                label.append(os.path.split(dirname)[-1])
                path.append(os.path.join(dirname,filename))

# Create df
df = pd.DataFrame(columns=['path','label'])
df['path']=path
df['label']=label

df.head()

df.tail()

import pandas as pd
import matplotlib.pyplot as plt

idx = 0
num_cols = 3  # Number of columns in the subplot grid
num_rows = 3  # Number of rows in the subplot grid
plt.figure(figsize=(15,12))

for unique_label in df['label'].unique():
    if idx < num_cols * num_rows:  # Check if we still have space in the grid
        plt.subplot(num_rows, num_cols, idx+1)
        plt.imshow(plt.imread(df[df['label']==unique_label].iloc[0,0]))
        plt.title(unique_label)
        plt.axis('off')
        idx+=1
    else:
        break  # Stop plotting if the grid is full

from sklearn.model_selection import train_test_split

#Train Test Split
train_df, test_df = train_test_split(df, train_size=0.8, shuffle=True, random_state=42)

#Check shape of df
print(train_df.shape)
print(test_df.shape)

from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_generator = ImageDataGenerator(preprocessing_function=preprocess_input, validation_split=0.2)
test_generator = ImageDataGenerator(preprocessing_function=preprocess_input)

train_images = train_generator.flow_from_dataframe(dataframe=train_df, x_col='path', y_col='label', target_size=(224, 224), color_mode='rgb', class_mode='categorical', batch_size=32, shuffle=True, seed=42, subset='training')
val_images = train_generator.flow_from_dataframe(dataframe=train_df, x_col='path', y_col='label', target_size=(224, 224), color_mode='rgb', class_mode='categorical', batch_size=32, shuffle=True, seed=42, subset='validation' )
test_images = test_generator.flow_from_dataframe(dataframe=test_df, x_col='path', y_col='label', target_size=(224, 224), color_mode='rgb', class_mode='categorical', batch_size=32, shuffle=False )

pretrained_model = tf.keras.applications.MobileNetV2(
    input_shape=(224, 224, 3),
    include_top=False,
    weights='imagenet',
    pooling='avg'
)

pretrained_model.trainable = False

# Add a classification head to the pretrained model
inputs = pretrained_model.input
x = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)
outputs = tf.keras.layers.Dense(5, activation='softmax')(x)  # Assuming 5 classes, adjust as needed
model = tf.keras.Model(inputs=inputs, outputs=outputs)

#Change the class_mode to 'sparse' to use integer labels
train_images = train_generator.flow_from_dataframe(dataframe=train_df, x_col='path', y_col='label', target_size=(224, 224), color_mode='rgb', class_mode='sparse', batch_size=32, shuffle=True, seed=42, subset='training')
val_images = train_generator.flow_from_dataframe(dataframe=train_df, x_col='path', y_col='label', target_size=(224, 224), color_mode='rgb', class_mode='sparse', batch_size=32, shuffle=True, seed=42, subset='validation' )
test_images = test_generator.flow_from_dataframe(dataframe=test_df, x_col='path', y_col='label', target_size=(224, 224), color_mode='rgb', class_mode='sparse', batch_size=32, shuffle=False )

#Change the loss function to sparse_categorical_crossentropy to work with integer labels
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy',metrics=['accuracy'])

history = model.fit(train_images,
                    validation_data=val_images,
                    epochs=3)

model.save('test_model.h5')

import pandas as pd  # Import the pandas library

# Sample data
data = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}

# Create the DataFrame
df = pd.DataFrame(data)

# Now you can call describe
df.describe()

def main():
    st.title("Animal/Bird Identification App")

    # Sidebar
    st.sidebar.header("Options")
    option = st.sidebar.selectbox("Choose an option", ["Upload Image", "View Data Visualization"])

    if option == "Upload Image":
        st.header("Upload an Image")

        # Image upload widget
        uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

        if uploaded_file is not None:
            try:
                # Display uploaded image
                image = Image.open(uploaded_file)
                st.image(image, caption='Uploaded Image', use_column_width=True)

                # Display progress and status
                with st.spinner("Identifying the animal..."):
                    predictions = identify_animal(image)
                    animal_name = predictions[0][1]  # Get the name of the top prediction
                    st.write(f"Identified Animal/Bird: {animal_name}")

                    # Store predictions in session state
                    st.session_state['predictions'] = predictions

            except Exception as e:
                st.error(f"Error processing image: {e}")

    elif option == "View Data Visualization":
        st.header("Data Visualization")

        # Check if predictions are available in session state
        if 'predictions' in st.session_state:
            predictions = st.session_state['predictions']
            # Display the chart with top predictions
            fig = generate_chart(predictions)
            st.pyplot(fig)
        else:
            st.write("Upload an image first to view data visualization.")